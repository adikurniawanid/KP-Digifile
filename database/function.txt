-- FUNCTION: public.add_user(character varying, character varying, character varying, character varying, character varying, integer)

-- DROP FUNCTION public.add_user(character varying, character varying, character varying, character varying, character varying, integer);

CREATE OR REPLACE FUNCTION public.add_user(
	_username character varying,
	_name character varying,
	_password character varying,
	_phone character varying,
	_email character varying,
	_space integer)
    RETURNS void
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
    
AS $BODY$
BEGIN
INSERT INTO users 
(username, name, password, phone, email, space, unused_space, level)
VALUES
(_username, _name, _password, _phone, _email, _space, 0, 2);
END
$BODY$;

ALTER FUNCTION public.add_user(character varying, character varying, character varying, character varying, character varying, integer)
    OWNER TO akdev;

-- FUNCTION: public.delete_file(integer, character varying)

-- DROP FUNCTION public.delete_file(integer, character varying);

CREATE OR REPLACE FUNCTION public.delete_file(
	_file_id integer,
	_username character varying)
    RETURNS void
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
    
AS $BODY$
BEGIN
UPDATE files SET trash_status = true
WHERE file_id = _file_id AND owner = _username;
END
$BODY$;

ALTER FUNCTION public.delete_file(integer, character varying)
    OWNER TO akdev;

-- FUNCTION: public.delete_trash(character varying, integer)

-- DROP FUNCTION public.delete_trash(character varying, integer);

CREATE OR REPLACE FUNCTION public.delete_trash(
	_owner character varying,
	_file_id integer)
    RETURNS void
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
    
AS $BODY$
BEGIN
DELETE FROM files 
WHERE trash_status = true AND file_id = _file_id AND owner =_owner ;
END
$BODY$;

ALTER FUNCTION public.delete_trash(character varying, integer)
    OWNER TO akdev;

-- FUNCTION: public.recovery_trash(integer, character varying)

-- DROP FUNCTION public.recovery_trash(integer, character varying);

CREATE OR REPLACE FUNCTION public.recovery_trash(
	_file_id integer,
	_username character varying)
    RETURNS void
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
    
AS $BODY$
BEGIN
UPDATE files SET trash_status = false
WHERE file_id = _file_id AND owner = _username;
END
$BODY$;

ALTER FUNCTION public.recovery_trash(integer, character varying)
    OWNER TO akdev;

-- FUNCTION: public.rename_file(integer, character varying)

-- DROP FUNCTION public.rename_file(integer, character varying);

CREATE OR REPLACE FUNCTION public.rename_file(
	id integer,
	new_name character varying)
    RETURNS void
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
    
AS $BODY$
BEGIN
UPDATE files SET file_name = new_name
WHERE file_id = id;
END
$BODY$;

ALTER FUNCTION public.rename_file(integer, character varying)
    OWNER TO akdev;

create function verify_login(in_username character varying, in_password character varying)
    returns TABLE(username character varying)
    language plpgsql
as
$$
BEGIN
    RETURN QUERY SELECT
        users.username
    FROM
        users
    WHERE
        users.username like in_username AND password like in_password;
END;
$$;

alter function verify_login(varchar, varchar) owner to akdev;

create function is_username_exist(in_username character varying)
    returns TABLE(username character varying)
    language plpgsql
as
$$
BEGIN
    RETURN QUERY SELECT
        users.username
    FROM
        users
    WHERE
        users.username like in_username;
END;
$$;

alter function is_username_exist(varchar) owner to akdev;

create function is_user(in_username character varying)
    returns TABLE(username character varying, description character varying)
    language plpgsql
as
$$
BEGIN
    RETURN QUERY SELECT
        users.username,
        roles.description
    FROM
        users
    INNER JOIN
        	roles ON roles.role_id = users.role_id
    WHERE
        users.username like in_username AND users.role_id = 2;
END;
$$;

alter function is_user(varchar) owner to akdev;

create function is_admin(in_username character varying)
    returns TABLE(username character varying, description character varying)
    language plpgsql
as
$$
BEGIN
    RETURN QUERY SELECT
        users.username,
        roles.description
    FROM
        users
    INNER JOIN
        	roles ON roles.role_id = users.role_id
    WHERE
        users.username like in_username AND users.role_id = 1;
END;
$$;

alter function is_admin(varchar) owner to akdev;

